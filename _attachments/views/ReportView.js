// Generated by CoffeeScript 1.8.0
var ReportView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ReportView = (function(_super) {
  __extends(ReportView, _super);

  function ReportView() {
    this.render = __bind(this.render, this);
    this.update = __bind(this.update, this);
    return ReportView.__super__.constructor.apply(this, arguments);
  }

  ReportView.prototype.initialize = function() {
    return $("html").append("<link href='js-libraries/Leaflet/leaflet.css' type='text/css' rel='stylesheet' /> <script type='text/javascript' src='js-libraries/Leaflet/leaflet.js'></script> <style> .dissaggregatedResults{ display: none; } </style>");
  };

  ReportView.prototype.el = '#content';

  ReportView.prototype.events = {
    "change #reportOptions": "update",
    "click #toggleDisaggregation": "toggleDisaggregation"
  };

  ReportView.prototype.update = function() {
    var reportOptions, url;
    reportOptions = {
      startDate: $('#start').val(),
      endDate: $('#end').val(),
      reportType: $('#report-type :selected').text()
    };
    _.each(this.locationTypes, function(location) {
      return reportOptions[location] = $("#" + location + " :selected").text();
    });
    url = "reports/" + _.map(reportOptions, function(value, key) {
      return "" + key + "/" + (escape(value));
    }).join("/");
    return Coconut.router.navigate(url, true);
  };

  ReportView.prototype.render = function(options) {
    this.reportType = options.reportType || "users";
    this.startDate = options.startDate || moment(new Date).subtract('days', 7).format("YYYY-MM-DD");
    this.endDate = options.endDate || moment(new Date).format("YYYY-MM-DD");
    return Coconut.questions.fetch({
      include_docs: true,
      success: (function(_this) {
        return function() {};
      })(this)
    }, this.$el.html("<style> table.results th.header, table.results td{ font-size:150%; } </style> <table id='reportOptions'></table>"), $("#reportOptions").append(this.formFilterTemplate({
      id: "question",
      label: "Question",
      form: "<select id='selected-question'> " + (Coconut.questions.map(function(question) {
        return "<option>" + (question.label()) + "</option>";
      }).join("")) + " </select>"
    })), $("#reportOptions").append(this.formFilterTemplate({
      id: "start",
      label: "Start Date",
      form: "<input id='start' type='date' value='" + this.startDate + "'/>"
    })), $("#reportOptions").append(this.formFilterTemplate({
      id: "end",
      label: "End Date",
      form: "<input id='end' type='date' value='" + this.endDate + "'/>"
    })), $("#reportOptions").append(this.formFilterTemplate({
      id: "report-type",
      label: "Report Type",
      form: "<select id='report-type'> " + (_.map(["spreadsheet", "users"], (function(_this) {
        return function(type) {
          return "<option " + (type === _this.reportType ? "selected='true'" : void 0) + ">" + type + "</option>";
        };
      })(this)).join("")) + " </select>"
    })), this[this.reportType](), $('div[data-role=fieldcontain]').fieldcontain(), $('select').selectmenu(), $('input[type=date]').datebox({
      mode: "calbox"
    }));
  };

  ReportView.prototype.hierarchyOptions = function(locationType, location) {
    if (locationType === "region") {
      return _.keys(WardHierarchy.hierarchy);
    }
    return _.chain(WardHierarchy.hierarchy).map(function(value, key) {
      if (locationType === "district" && location === key) {
        return _.keys(value);
      }
      return _.map(value, function(value, key) {
        if (locationType === "constituan" && location === key) {
          return _.keys(value);
        }
        return _.map(value, function(value, key) {
          if (locationType === "shehia" && location === key) {
            return value;
          }
        });
      });
    }).flatten().compact().value();
  };

  ReportView.prototype.mostSpecificLocationSelected = function() {
    var mostSpecificLocationType, mostSpecificLocationValue;
    mostSpecificLocationType = "region";
    mostSpecificLocationValue = "ALL";
    _.each(this.locationTypes, function(locationType) {
      if (this[locationType] !== "ALL") {
        mostSpecificLocationType = locationType;
        return mostSpecificLocationValue = this[locationType];
      }
    });
    return {
      type: mostSpecificLocationType,
      name: mostSpecificLocationValue
    };
  };

  ReportView.prototype.formFilterTemplate = function(options) {
    return "<tr> <td> <label style='display:inline' for='" + options.id + "'>" + options.label + "</label> </td> <td style='width:150%'> " + options.form + " </select> </td> </tr>";
  };

  ReportView.prototype.spreadsheet = function() {
    $($("#reportOptions tr")[0]).hide();
    $("#reportOptions").after("<a id='csv' href='http://spreadsheet.coconutclinic.org/spreadsheet/" + this.startDate + "/" + this.endDate + "'>Download spreadsheet for " + this.startDate + " to " + this.endDate + "</a>");
    return $("a#csv").button();
  };

  ReportView.prototype.users = function() {
    var aggregatedData, users;
    this.$el.append("<table id='users' class='tablesorter'> <thead> <th>User</th> <th>Clinical Visit</th> <th>Demographic</th> </thead> <tbody> </tbody> </table>");
    aggregatedData = {
      "Total": {
        "Clinical Visit": 0,
        "Client Demographics": 0
      }
    };
    users = new UserCollection();
    return users.fetch({
      include_docs: true,
      success: (function(_this) {
        return function() {
          users.each(function(user) {
            return aggregatedData[user.get("_id").replace(/user\./, "")] = {
              "Clinical Visit": 0,
              "Client Demographics": 0
            };
          });
          return $.couch.db(Coconut.config.database_name()).view("" + (Coconut.config.design_doc_name()) + "-server/resultsByUser", {
            startkey: _this.startDate,
            endkey: moment(_this.endDate).endOf("day").format("YYYY-MM-DD HH:mm:ss"),
            success: function(results) {
              _(results.rows).each(function(result) {
                if (result.value[1] === "Clinical Visit" || result.value[1] === "Client Demographics") {
                  aggregatedData[result.value[0]][result.value[1]] += 1;
                  return aggregatedData["Total"][result.value[1]] += 1;
                }
              });
              $("table#users tbody").append(_(aggregatedData).map(function(countByQuestion, user) {
                return "<tr id='user-" + user + "'> <td>" + user + "</td> <td>" + countByQuestion["Clinical Visit"] + "</td> <td>" + countByQuestion["Client Demographics"] + "</td> </tr>";
              }).join(""));
              $(".user-total").css("font-weight:bold");
              return $("table#users").dataTable({
                aaSorting: [[1, "desc"], [2, "desc"]],
                iDisplayLength: 25
              });
            }
          });
        };
      })(this)
    });
  };

  ReportView.prototype.toggleDisaggregation = function() {
    return $(".dissaggregatedResults").toggle();
  };

  return ReportView;

})(Backbone.View);

//# sourceMappingURL=ReportView.js.map
