// Generated by CoffeeScript 1.7.1
var MenuView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MenuView = (function(_super) {
  __extends(MenuView, _super);

  function MenuView() {
    this.checkReplicationStatus = __bind(this.checkReplicationStatus, this);
    this.render = __bind(this.render, this);
    return MenuView.__super__.constructor.apply(this, arguments);
  }

  MenuView.prototype.el = '.question-buttons';

  MenuView.prototype.events = {
    "change": "render"
  };

  MenuView.prototype.render = function() {
    this.$el.html("<div id='navbar' data-role='navbar'> <ul></ul> </div>");
    this.updateVersion();
    this.checkReplicationStatus();
    return Coconut.questions.fetch({
      include_docs: true,
      success: (function(_this) {
        return function() {
          _this.$el.find("ul").html("<li> <a id='menu-retrieve-client' href='#new/result'> <h2>Find/Create Client<div id='menu-partial-amount'>&nbsp;</div></h2> </a> </li> ");
          _this.$el.find("ul").append(Coconut.questions.map(function(question, index) {
            return "<li><a id='menu-" + index + "' class='menu-" + index + "' href='#show/results/" + (escape(question.id)) + "'><h2>" + question.id + "<div id='menu-partial-amount'></div></h2></a></li>";
          }).join(" "));
          $(".question-buttons").navbar();
          Coconut.questions.each(function(question, index) {
            return $(".menu-" + index).addClass('ui-disabled');
          });
          return _this.update();
        };
      })(this)
    });
  };

  MenuView.prototype.updateVersion = function() {
    return $.ajax("version", {
      success: function(result) {
        return $("#version").html(result);
      },
      error: $("#version").html("-")
    });
  };

  MenuView.prototype.update = function() {
    return;
    return this.updateVersion();
  };

  MenuView.prototype.checkReplicationStatus = function() {
    return $.couch.login({
      name: Coconut.config.get("local_couchdb_admin_username"),
      password: Coconut.config.get("local_couchdb_admin_password"),
      error: (function(_this) {
        return function() {
          return console.log("Could not login");
        };
      })(this),
      complete: (function(_this) {
        return function() {
          return $.ajax({
            url: "/_active_tasks",
            dataType: 'json',
            success: function(response) {
              var activity, progress, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
              progress = response != null ? (_ref = response[0]) != null ? _ref.progress : void 0 : void 0;
              if (progress) {
                activity = (response != null ? (_ref1 = response[0]) != null ? (_ref2 = _ref1.target) != null ? _ref2.match(/http/) : void 0 : void 0 : void 0) ? "Sending" : (response != null ? (_ref3 = response[0]) != null ? (_ref4 = _ref3.source) != null ? _ref4.match(/http/) : void 0 : void 0 : void 0) ? "Receiving" : (response != null ? (_ref5 = response[0]) != null ? (_ref6 = _ref5.type) != null ? _ref6.match(/indexer/) : void 0 : void 0 : void 0) ? "Indexing" : "Other";
                $("#databaseStatus").html("" + activity + " " + progress + "% Complete");
                return _.delay(_this.checkReplicationStatus, 1000);
              } else {
                console.log("No database status update");
                $("#databaseStatus").html("");
                return _.delay(_this.checkReplicationStatus, 60000);
              }
            },
            error: function(error) {
              console.log("Could not check active_tasks: " + (JSON.stringify(error)));
              return _.delay(_this.checkReplicationStatus, 60000);
            }
          });
        };
      })(this)
    });
  };

  return MenuView;

})(Backbone.View);

//# sourceMappingURL=MenuView.map
