// Generated by CoffeeScript 1.8.0
var Sync,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Sync = (function(_super) {
  __extends(Sync, _super);

  function Sync() {
    this.replicateApplicationDocs = __bind(this.replicateApplicationDocs, this);
    this.replicate = __bind(this.replicate, this);
    this.checkStatus = __bind(this.checkStatus, this);
    this.sendAndGetFromCloud = __bind(this.sendAndGetFromCloud, this);
    this.getFromCloud = __bind(this.getFromCloud, this);
    this.log = __bind(this.log, this);
    this.sendToCloud = __bind(this.sendToCloud, this);
    this.last_get_time = __bind(this.last_get_time, this);
    this.last_get = __bind(this.last_get, this);
    this.last_send_time = __bind(this.last_send_time, this);
    this.last_send = __bind(this.last_send, this);
    return Sync.__super__.constructor.apply(this, arguments);
  }

  Sync.prototype.initialize = function() {
    return this.set({
      _id: "SyncLog"
    });
  };

  Sync.prototype.url = "/sync";

  Sync.prototype.last_send = function() {
    var _ref;
    return (_ref = this.get("last_send_result")) != null ? _ref.history[0] : void 0;
  };

  Sync.prototype.last_send_time = function() {
    var result, _ref;
    result = this.get("last_send_time") || ((_ref = this.last_send) != null ? _ref.start_time : void 0);
    if (result) {
      return moment(result).fromNow();
    } else {
      return "never";
    }
  };

  Sync.prototype.last_get = function() {
    return this.get("last_get_log");
  };

  Sync.prototype.last_get_time = function() {
    var result;
    result = this.get("last_get_time");
    if (result) {
      return moment(this.get("last_get_time")).fromNow();
    } else {
      return "never";
    }
  };

  Sync.prototype.sendToCloud = function(options) {
    return this.fetch({
      success: (function(_this) {
        return function() {
          var resultCollection;
          _this.log("Sending data to " + (Coconut.config.database_name()));
          switch (Coconut.config.get("sync_mode")) {
            case "couchdb-sync":
              return $.couch.replicate(Coconut.config.database_name(), Coconut.config.cloud_url_with_credentials(), {
                success: function(response) {
                  _this.save({
                    last_send_result: response
                  });
                  return options.success(response);
                },
                error: function(error) {
                  return options.error(error);
                }
              });
            case "http-post":
              resultCollection = new ResultCollection();
              return resultCollection.fetch({
                success: function() {
                  var httpPostTarget, notSentResults, saveSyncLog;
                  notSentResults = resultCollection.notSent();
                  saveSyncLog = _.after(notSentResults.length, function() {
                    return _this.save({
                      last_send_time: new Date()
                    }, Coconut.menuView.update(), $(".sync-sent-status").html("a few seconds ago"));
                  });
                  httpPostTarget = Coconut.config.local.httpPostTarget();
                  return _.each(resultCollection.notSent(), function(result) {
                    return $.ajax({
                      type: "POST",
                      url: httpPostTarget,
                      data: result.toJSON(),
                      success: function() {
                        result.set("sentTo", httpPostTarget);
                        if (Coconut.config.get("completion_mode") === "on-send") {
                          result.set("complete", "true");
                        }
                        result.save();
                        return saveSyncLog();
                      },
                      error: function(error) {
                        return $(".sync-sent-status").html("Error saving to " + httpPostTarget + ": " + (JSON.stringify(error)));
                      }
                    });
                  });
                }
              });
          }
        };
      })(this)
    });
  };

  Sync.prototype.log = function(message) {
    Coconut.debug(message);
    $(".sync-get-status").html(message);
    return $("#message").append(message + "<br/>");
  };

  Sync.prototype.getFromCloud = function(options) {
    return this.fetch({
      success: (function(_this) {
        return function() {
          return $.couch.login({
            name: Coconut.config.get("local_couchdb_admin_username"),
            password: Coconut.config.get("local_couchdb_admin_password"),
            complete: function() {
              _this.log("Updating application documents (forms, users, application code)");
              return _this.replicateApplicationDocs({
                success: function() {
                  var reload_delay_seconds;
                  _this.log("Finished");
                  _this.save({
                    last_get_time: new Date().getTime()
                  });
                  if (options != null) {
                    if (typeof options.success === "function") {
                      options.success();
                    }
                  }
                  reload_delay_seconds = 2;
                  _this.log("Reloading application in " + reload_delay_seconds + " seconds");
                  return _.delay(document.location.reload, reload_delay_seconds * 1000);
                },
                error: function(error) {
                  $.couch.logout();
                  return _this.log("Error updating application: " + error);
                }
              });
            },
            error: function(error) {
              return _this.log("Error logging in as local admin: " + error + ", trying to proceed anyway in case we are in admin party");
            }
          });
        };
      })(this)
    });
  };

  Sync.prototype.sendAndGetFromCloud = function(options) {
    this.log("Checking for internet. (Is " + (Coconut.config.cloud_url()) + " is reachable?) Please wait.");
    return $.ajax({
      url: Coconut.config.cloud_url(),
      error: (function(_this) {
        return function(error) {
          _this.log("ERROR! " + (Coconut.config.cloud_url()) + " is not reachable. Either the internet is not working or the site is down: " + error);
          if (options != null) {
            options.error();
          }
          return _this.save({
            last_send_error: true
          });
        };
      })(this),
      success: (function(_this) {
        return function() {
          var statusChecker;
          _this.log("" + (Coconut.config.cloud_url()) + " is reachable, so internet is available.");
          statusChecker = setInterval(_this.checkStatus(), 5000);
          return _this.sendToCloud({
            success: function(result) {
              _this.log("Data sent: <small><pre>" + (JSON.stringify(result, void 0, 2)) + "</pre></small>");
              return _this.replicate({
                success: function(result) {
                  _this.log("Data received: <small><pre>" + (JSON.stringify(result, void 0, 2)) + "</pre></small>");
                  _this.log("Sync Complete");
                  _this.save({
                    last_get_time: new Date().getTime()
                  });
                  return options != null ? typeof options.success === "function" ? options.success() : void 0 : void 0;
                },
                error: function() {
                  _this.log("Sync fail during get");
                  return options != null ? typeof options.error === "function" ? options.error() : void 0 : void 0;
                }
              });
            },
            error: function(error) {
              return _this.log("Synchronization fail during send: " + (JSON.stringify(error)));
            }
          });
        };
      })(this)
    });
  };

  Sync.prototype.checkStatus = function() {
    return $.ajax({
      url: "" + (Coconut.config.cloud_url()) + "/_active_tasks",
      success: (function(_this) {
        return function(result) {
          return _this.log(result);
        };
      })(this)
    });
  };

  Sync.prototype.getNewNotifications = function(options) {
    return $.couch.db(Coconut.config.database_name()).view(("" + (Coconut.config.design_doc_name()) + "/rawNotificationsConvertedToCaseNotifications")({
      descending: true,
      include_docs: true,
      limit: 1,
      success: function(result) {
        var healthFacilities, mostRecentNotification, url, _ref, _ref1;
        mostRecentNotification = (_ref = result.rows) != null ? (_ref1 = _ref[0]) != null ? _ref1.doc.date : void 0 : void 0;
        url = "" + (Coconut.config.cloud_url_with_credentials()) + "/_design/" + (Coconut.config.database_name()) + "/_view/notifications?&ascending=true&include_docs=true&skip=1";
        if (mostRecentNotification) {
          url += "&startkey=\"" + mostRecentNotification + "\"";
        }
        healthFacilities = WardHierarchy.allWards({
          district: User.currentUser.get("district")
        });
        if (User.currentUser.get("district") == null) {
          healthFacilities = [];
        }
        return $.ajax({
          url: url,
          dataType: "jsonp",
          success: function(result) {
            _.each(result.rows, function(row) {
              var notification;
              notification = row.doc;
              if (_.include(healthFacilities, notification.hf)) {
                result = new Result({
                  question: "Case Notification",
                  MalariaCaseID: notification.caseid,
                  FacilityName: notification.hf,
                  Shehia: notification.shehia,
                  Name: notification.name
                });
                result.save();
                notification.hasCaseNotification = true;
                return $.couch.db(Coconut.config.database_name()).saveDoc(notification);
              }
            });
            return typeof options.success === "function" ? options.success() : void 0;
          }
        });
      }
    }));
  };

  Sync.prototype.replicate = function(options) {
    this.log("Preparing to receive data");
    return $.couch.login({
      name: Coconut.config.get("local_couchdb_admin_username"),
      password: Coconut.config.get("local_couchdb_admin_password"),
      complete: (function(_this) {
        return function() {
          _this.log("Receiving data from " + (Coconut.config.database_name()));
          return $.couch.replicate(Coconut.config.cloud_url_with_credentials(), Coconut.config.database_name(), {
            success: function(result) {
              var originalLocalConfig;
              _this.log("Data received: <small><pre>" + (JSON.stringify(result, void 0, 2)) + "</pre></small>");
              _this.log("Returning coconut.config.local to original state");
              originalLocalConfig = Coconut.config.local.toJSON();
              delete originalLocalConfig._rev;
              return Coconut.config.local.fetch({
                success: function() {
                  return Coconut.config.local.save(originalLocalConfig, {
                    success: function() {
                      _this.save({
                        last_get_time: new Date().getTime()
                      });
                      return options.success();
                    },
                    error: function(error) {
                      return _this.log("Couldn't fix coconut.config.local: " + error);
                    }
                  });
                }
              });
            },
            error: function(error) {
              _this.log("Error receiving data from " + (Coconut.config.database_name()) + ": " + (JSON.stringify(error)));
              return options.error();
            }
          }, options.replicationArguments);
        };
      })(this),
      error: (function(_this) {
        return function() {
          return _this.log("Unable to login as local admin for replicating the design document (main application),  trying to proceed anyway in case we are in admin party.");
        };
      })(this)
    });
  };

  Sync.prototype.replicateApplicationDocs = function(options) {
    return $.couch.db(Coconut.config.database_name()).view("" + (Coconut.config.design_doc_name()) + "/byCollection", {
      keys: ["question", "user"],
      include_docs: false,
      success: (function(_this) {
        return function(result) {
          var doc_ids;
          doc_ids = _.pluck(result.rows, "id");
          doc_ids.push("_design/" + (Coconut.config.design_doc_name()));
          doc_ids.push("coconut.config");
          _this.log("Updating " + doc_ids.length + " docs (users, forms, configuration and the design document). Please wait.");
          return _this.replicate(_.extend(options, {
            replicationArguments: {
              doc_ids: doc_ids
            }
          }));
        };
      })(this)
    });
  };

  Sync.prototype.migrate = function() {
    var createAndMigrate, doc_ids;
    createAndMigrate = function(doc_ids) {
      console.log("encoding doc_ids");
      doc_ids = _(doc_ids).map(function(doc_id) {
        return encodeURIComponent(doc_id);
      });
      console.log("finished encoding");
      return $.couch.db("migrate").create({
        success: function() {
          return $.couch.replicate("coconut", "migrate", {
            success: function(result) {
              console.log(JSON.stringify(result));
              return $.couch.db("coconut").drop({
                success: function() {
                  return $.couch.db("coconut").create({
                    success: function() {
                      return $.couch.replicate("migrate", "coconut", {
                        success: function(result) {
                          console.log(JSON.stringify(result));
                          return $.couch.db("migrate").drop({
                            success: function() {
                              return console.log("DONE");
                            }
                          });
                        }
                      });
                    }
                  });
                }
              });
            }
          }, {
            doc_ids: doc_ids
          });
        }
      });
    };
    doc_ids = [];
    return $.couch.db(Coconut.config.database_name()).view("" + (Coconut.config.design_doc_name()) + "/byCollection", {
      keys: ["question", "user"],
      include_docs: false,
      success: (function(_this) {
        return function(result) {
          doc_ids.push.apply(doc_ids, _.pluck(result.rows, "id"));
          doc_ids.push("_design/" + (Coconut.config.design_doc_name()));
          doc_ids.push("coconut.config");
          doc_ids.push("coconut.config.local");
          console.log(doc_ids.length);
          return $.couch.db(Coconut.config.database_name()).view("" + (Coconut.config.design_doc_name()) + "/clients", {
            include_docs: false,
            success: function(result) {
              doc_ids.push.apply(doc_ids, _.pluck(result.rows, "id"));
              console.log(doc_ids.length);
              return $.couch.allDbs({
                success: function(result) {
                  if (_(result).contains("migrate")) {
                    return $.couch.db("migrate").drop({
                      success: function() {
                        return createAndMigrate(doc_ids);
                      }
                    });
                  } else {
                    return createAndMigrate(doc_ids);
                  }
                }
              });
            }
          });
        };
      })(this)
    });
  };

  return Sync;

})(Backbone.Model);

//# sourceMappingURL=Sync.js.map
